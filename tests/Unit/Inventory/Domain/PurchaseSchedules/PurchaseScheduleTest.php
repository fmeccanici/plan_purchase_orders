<?php

namespace Tests\Unit\Inventory\Domain\PurchaseSchedules;

use App\Inventory\Domain\PurchaseSchedules\CreatePurchaseSchedule;
use App\Inventory\Domain\PurchaseSchedules\PurchaseMoment;
use App\Inventory\Domain\PurchaseSchedules\PurchaseOrderPlacementTime;
use Carbon\CarbonImmutable;
use Tests\TestCase;

class PurchaseScheduleTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function it_should_calculate_next_purchase_moment_1()
    {
        // Given
        $monday = new PurchaseMoment(9, 0, PurchaseMoment::MONDAY, PurchaseMoment::FRIDAY);
        $tuesday = new PurchaseMoment(11, 0, PurchaseMoment::TUESDAY, PurchaseMoment::FRIDAY);
        $wednesday = new PurchaseMoment(15, 0, PurchaseMoment::WEDNESDAY, PurchaseMoment::FRIDAY);
        $thursday = new PurchaseMoment(9, 0, PurchaseMoment::THURSDAY, PurchaseMoment::FRIDAY);
        $friday = new PurchaseMoment(11, 0, PurchaseMoment::FRIDAY, PurchaseMoment::MONDAY);
        $saturday = new PurchaseMoment(15, 0, PurchaseMoment::SATURDAY, PurchaseMoment::MONDAY);
        $sunday = new PurchaseMoment(9, 0, PurchaseMoment::SUNDAY, PurchaseMoment::MONDAY);

        $purchaseSchedule = CreatePurchaseSchedule::one([
            'supplier_id' => '1',
            'tag' => 'Onderhoudsproducten',
            'purchase_moments' => collect([$monday, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday])
        ]);

        $from = CarbonImmutable::now()->next(CarbonImmutable::MONDAY);

        // When
        $nextPurchaseMoment = $purchaseSchedule->nextPurchaseMomentOfTheDay($from);

        // Then
        $expectedPurchaseMoment = new PurchaseMoment(9, 0, PurchaseMoment::MONDAY, PurchaseMoment::FRIDAY);
        self::assertEquals($expectedPurchaseMoment, $nextPurchaseMoment);
    }

    /** @test */
    public function it_should_calculate_next_purchase_order_placement_date_time_2()
    {
        // Given
        $tuesday = new PurchaseMoment(11, 0, PurchaseMoment::TUESDAY, PurchaseMoment::FRIDAY);
        $wednesday = new PurchaseMoment(15, 0, PurchaseMoment::WEDNESDAY, PurchaseMoment::FRIDAY);
        $thursday = new PurchaseMoment(9, 0, PurchaseMoment::THURSDAY, PurchaseMoment::FRIDAY);
        $friday = new PurchaseMoment(11, 0, PurchaseMoment::FRIDAY, PurchaseMoment::MONDAY);
        $saturday = new PurchaseMoment(15, 0, PurchaseMoment::SATURDAY, PurchaseMoment::MONDAY);
        $sunday = new PurchaseMoment(9, 0, PurchaseMoment::SUNDAY, PurchaseMoment::MONDAY);

        $purchaseSchedule = CreatePurchaseSchedule::one([
            'supplier_id' => '1',
            'tag' => 'Onderhoudsproducten',
            'purchase_moments' => collect([$tuesday, $wednesday, $thursday, $friday, $saturday, $sunday])
        ]);

        $from = CarbonImmutable::now()->next(CarbonImmutable::MONDAY);

        // When
        $nextPurchaseMoment = $purchaseSchedule->nextPurchaseMomentOfTheDay($from);

        // Then
        self::assertNull($nextPurchaseMoment);
    }

    /** @test */
    public function it_should_calculate_next_purchase_moment_3()
    {
        // Given
        $monday1 = new PurchaseMoment(9, 0, PurchaseMoment::MONDAY, PurchaseMoment::FRIDAY);
        $monday2 = new PurchaseMoment(11, 0, PurchaseMoment::MONDAY, PurchaseMoment::FRIDAY);
        $tuesday = new PurchaseMoment(11, 0, PurchaseMoment::TUESDAY, PurchaseMoment::FRIDAY);
        $wednesday = new PurchaseMoment(15, 0, PurchaseMoment::WEDNESDAY, PurchaseMoment::FRIDAY);
        $thursday = new PurchaseMoment(9, 0, PurchaseMoment::THURSDAY, PurchaseMoment::FRIDAY);
        $friday = new PurchaseMoment(11, 0, PurchaseMoment::FRIDAY, PurchaseMoment::MONDAY);
        $saturday = new PurchaseMoment(15, 0, PurchaseMoment::SATURDAY, PurchaseMoment::MONDAY);
        $sunday = new PurchaseMoment(9, 0, PurchaseMoment::SUNDAY, PurchaseMoment::MONDAY);

        $purchaseSchedule = CreatePurchaseSchedule::one([
            'supplier_id' => '1',
            'tag' => 'Onderhoudsproducten',
            'purchase_moments' => collect([$monday1, $monday2, $tuesday, $wednesday, $thursday, $friday, $saturday, $sunday])
        ]);


        $from = CarbonImmutable::now()->next(CarbonImmutable::MONDAY)->hour(10);

        // When
        $nextPurchaseMoment = $purchaseSchedule->nextPurchaseMomentOfTheDay($from);

        // Then
        $expectedPurchaseMoment = new PurchaseMoment(11, 0, PurchaseMoment::MONDAY, PurchaseMoment::FRIDAY);
        self::assertEquals($expectedPurchaseMoment, $nextPurchaseMoment);
    }
}
