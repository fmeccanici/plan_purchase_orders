<?php


use App\Inventory\Domain\InventoryItems\InventoryItem;
use App\Inventory\Domain\InventoryItems\InventoryItemFactory;
use App\Inventory\Domain\InventoryItems\Stock;
use App\Inventory\Domain\InventoryItems\Warehouse;
use App\Inventory\Infrastructure\ApiClients\PicqerApiClient;
use App\Inventory\Infrastructure\Persistence\Picqer\Repositories\PicqerInventoryItemRepository;
use Mockery\MockInterface;
use Tests\TestCase;
use Tests\Unit\Warehouse\Mocks\Picqer\PicqerMock;

class PicqerInventoryItemRepositoryTest extends TestCase
{
    protected const PICQER_MAIN_WAREHOUSE_ID = 7053;
    private PicqerInventoryItemRepository $inventoryItemRepository;
    private string $productCode;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->productCode = 'Test Product Code';
        $clientMock = new PicqerMock();

        $picqerApiClientMock = $this->mock(PicqerApiClient::class, function (MockInterface $mock) use ($clientMock) {
            $mock->shouldReceive('getClient')
                ->once()
                ->andReturn($clientMock);
        });

        $this->inventoryItemRepository = new PicqerInventoryItemRepository($picqerApiClientMock);
    }

    /** @test */
    public function it_should_find_one_inventory_item_by_product_code()
    {
        // Given
        $inventoryItem = InventoryItemFactory::create([
            'productCode' => $this->productCode
        ]);
        $this->inventoryItemRepository->save($inventoryItem);

        // When
        $foundInventoryItem = $this->inventoryItemRepository->findOneByProductCode($inventoryItem->productCode());

        // Then
        self::assertEquals($inventoryItem->stock()->free(), $foundInventoryItem->stock()->free());
    }

    /** @test */
    public function it_should_not_add_inventory_item_if_it_already_exists()
    {
        // Given
        $productCode = 'Test Product Code';
        $warehouse = new Warehouse();
        $warehouse->setIdentity(self::PICQER_MAIN_WAREHOUSE_ID);
        $inventoryItem = InventoryItemFactory::create([
            'registrationNumber' => 1,
            'productCode' => $productCode,
            'warehouse' => $warehouse,
            'type' => 'virtual_composition'
        ]);
        $this->inventoryItemRepository->save($inventoryItem);
        $this->inventoryItemRepository->save($inventoryItem);

        // When
        $foundInventoryItems = $this->inventoryItemRepository->findAll()->filter(function (InventoryItem $inventoryItem) use ($productCode) {
            return $inventoryItem->productCode() === $productCode;
        });

        // Then
        self::assertEquals(1, $foundInventoryItems->count());
    }

    /** @test */
    public function it_should_update_inventory_item_quantity()
    {
        // Given
        $productCode = 'Test Product Code';
        $warehouse = new Warehouse();
        $warehouse->setIdentity(self::PICQER_MAIN_WAREHOUSE_ID);
        $quantity = 10;
        $inventoryItem = InventoryItemFactory::create([
            'registrationNumber' => 1,
            'productCode' => $productCode,
            'stock' => new Stock($quantity, 0, 0),
            'warehouse' => $warehouse
        ]);
        $this->inventoryItemRepository->save($inventoryItem);

        // When
        $inventoryItem->increaseStock(1);
        $this->inventoryItemRepository->update($inventoryItem);

        // Then
        $foundInventoryItem = $this->inventoryItemRepository->findOneByProductCode($productCode);
        self::assertEquals($inventoryItem->stock()->free(), $foundInventoryItem->stock()->free());
    }

    /** @test */
    public function it_should_update_tags()
    {
        // Given
        $productCode = 'Test Product Code';
        $tag = 'Test Tag';
        $warehouse = new Warehouse();
        $warehouse->setIdentity(self::PICQER_MAIN_WAREHOUSE_ID);
        $quantity = 10;
        $inventoryItem = InventoryItemFactory::create([
            'registrationNumber' => 1,
            'productCode' => $productCode,
            'quantity' => $quantity,
            'warehouse' => $warehouse
        ]);
        $this->inventoryItemRepository->save($inventoryItem);

        // When
        $inventoryItem->addTag($tag);
        $this->inventoryItemRepository->update($inventoryItem);

        // Then
        $foundInventoryItem = $this->inventoryItemRepository->findOneByProductCode($productCode);
        self::assertEquals($tag, $foundInventoryItem->tags()->first());
    }

    /** @test */
    public function it_should_find_all_normal_inventory_items()
    {
        // Given
        $inventoryItems = InventoryItemFactory::createMultiple(10, [
            'type' => 'normal'
        ]);

        $this->inventoryItemRepository->saveMultiple($inventoryItems);

        // When
        $foundInventoryItems = $this->inventoryItemRepository->findAllByType('normal');

        // Then
        self::assertCount(10, $foundInventoryItems);
    }

    /** @test */
    public function it_should_set_desired_stock_purchasing_in_multiples_of_and_minimum_purchasing_amount()
    {
        // Given
        $purchaseInMultiplesOf = 5;
        $minimumPurchasingAmount = 2;
        $desiredStock = 3;
        $inventoryItem = InventoryItemFactory::create([
            'purchaseInMultiplesOf' => $purchaseInMultiplesOf,
            'minimumPurchasingAmount' => $minimumPurchasingAmount,
            'desiredStock' => $desiredStock
        ]);

        $inventoryItem = $this->inventoryItemRepository->save($inventoryItem);

        // When
        $foundInventoryItem = $this->inventoryItemRepository->findOneByProductCode($inventoryItem->productCode());

        // Then
        self::assertEquals($inventoryItem->purchaseSettings()->purchaseInMultiplesOf(), $foundInventoryItem->purchaseSettings()->purchaseInMultiplesOf());
        self::assertEquals($inventoryItem->purchaseSettings()->minimumPurchasingAmount(), $foundInventoryItem->purchaseSettings()->minimumPurchasingAmount());
        self::assertEquals($desiredStock, $foundInventoryItem->stock()->desired());
    }
}
