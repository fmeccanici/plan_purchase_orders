<?php

namespace Tests\Unit\Inventory\Infrastructure\Persistence\Picqer\Repositories;

use App\Inventory\Domain\Suppliers\CreateSupplier;
use App\Inventory\Infrastructure\ApiClients\PicqerApiClient;
use App\Inventory\Infrastructure\Persistence\Picqer\Repositories\PicqerSupplierRepository;
use Mockery\MockInterface;
use Tests\TestCase;
use Tests\Unit\Warehouse\Mocks\Picqer\PicqerMock;

class PicqerSupplierRepositoryTest extends TestCase
{
    protected PicqerSupplierRepository $supplierRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $clientMock = new PicqerMock();

        $picqerApiClientMock = $this->mock(PicqerApiClient::class, function (MockInterface $mock) use ($clientMock) {
            $mock->shouldReceive('getClient')
                ->once()
                ->andReturn($clientMock);
        });

        $this->supplierRepository = new PicqerSupplierRepository($picqerApiClientMock);
    }

    /** @test */
    public function it_should_return_supplier_by_id()
    {
        // Given
        $supplier = CreateSupplier::peitsman();

        // When
        $supplier = $this->supplierRepository->save($supplier);

        // Then
        $foundSupplier = $this->supplierRepository->findOneById($supplier->identity());
        self::assertEquals($supplier, $foundSupplier);
    }
}
